/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.File;
import java.io.IOException;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
/**
 *
 * @author Naga Sri Rama Yashwanth Thota
 * @UID: 1001507395
 *
 * Reference: http://cs.lmu.edu/~ray/notes/javanetexamples/
 *            https://www.shubhsblog.com/programming/multithreaded-webserver-java.html
 *            http://javabeginnerstutorial.com/code-base/split-a-string-using-scannner-class-in-java/
 *            https://stackoverflow.com/questions/20728050/split-strings-in-java-by-words
 *            https://stackoverflow.com/questions/326390/how-do-i-create-a-java-string-from-the-contents-of-a-file
 *            https://www.youtube.com/watch?v=kqBmsLvWU14
 *
 * This is main Server Class.
 * Server is MultiThreaded. It creates new thread for each client connection
 * Server has a GUI.
 */
public class Multi extends javax.swing.JFrame {

    /**
     * Creates new form Multi
     */
    public Multi() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setEditable(false);
        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        jButton1.setText("exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //this is the code for "exit" button. when exit button is clicked the GUI program gets closed. 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
        /**
     * The port that the server listens on.
     */
    public static final int port = 1205;
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Multi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Multi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Multi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Multi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the GUI interface of server */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Multi().setVisible(true);//this command makes the GUI visible to user.
            }
        });
        ServerSocket ss = null;
        try {
            ss = new ServerSocket(port); //Server socket will be created here at the given port
        } catch (IOException e) { /*If exception occurs, stack trace is printed for debugging 
                                    and relevant user msg shown
            */
            System.out.println("Cannot start Server on port " + port);
            e.printStackTrace();
            System.exit(-1);
        }
        //Below is the code for the multi threading,This code actually creates new thread for each user. 
                try {
            while (true) {
                //For each client a new thread is created to handle that user.
                new Thread(new ClientHandler(ss.accept())).start();
            }
        } finally {
            ss.close(); //Closes in case of exception
        }
    }
     /**
     * A handler Runnable class.  Handlers are spawned from the listening
     * loop and are responsible for a dealing with a single client.
     */
        private static class ClientHandler implements Runnable {
        private Socket s; //Socket from this client to server.
        private DataInputStream din;//to receive messages from other communicating Client.
        private DataOutputStream dout;// To send messages to other communicating Client.   
        /**
         * Constructs a handler thread, squirreling away the socket.
         * All the interesting work is done in the run method.
         */
        public ClientHandler(Socket socket) {
            this.s = socket;
        }

        /**
         * Services this thread's client by scanning the text and look up 
         * each word in the text in the lexicon file. If it does not find the word then it will insert a string 
         * in the text that will indicate the error - something like
         * When it has finished checking the input text block the server will return it to the client 
         * and break the connection.
         */
        public void run(){
          String msgin = "";
        try{
            Scanner scanner = new Scanner( new File("textfile.txt") );//it opens the lexicon file
            String str = scanner.useDelimiter("\\A").next();//splits the string based on lines and stores it in string variable
            String[] inputs = str.split("\\s");//splits the string based on whitespace and stores it in string variable
            din = new DataInputStream(s.getInputStream());//it is used to handle the data which comes from client
            dout = new DataOutputStream(s.getOutputStream());//it is used to handle the data which is sent by server
            
            
            /*this is a spell check funtion which checks the word with the input data
            *returns the result to the the client
            */
            while(true){
                msgin = din.readUTF();//reads the data which was sent by client
                msg_area.setText(msg_area.getText().trim()+"\n Client:\t"+msgin);//displays client message on server screen
                String str1 = msgin;// used to store the input
                String strr ="";// used to store the result
                int i = msgin.length();//calculate the length of the client message  
                String[] words=str1.split("\\s");//splits the string based on whitespace  
                
                /*this loop is the spellcheck loop 
                */
                outer:
                for(String w:words){ //words present in client message    
                for(String b:inputs)//words present in lexicon
                {
                    
                 /*case check for wrong spelling
                  *if the spelling of the word do not match the lexicon word 
                  *then it replaces "error" in the place of that word
                 */
                if( w.equals(b))
                   {
                    strr = strr +" " +"<error>";
                    //if this statement executes than we need to skip this loop and compare for another word
                    continue outer;
                   }
                }
                strr = strr +" "+ w;/*if the spelling of the word matches with the spelling in lexicon it will
                                    * concatenate that word to the result
                                    */
                }
                dout.writeUTF(strr);//Sends the spell check result to client
                dout.writeUTF("Server disconnected...!!!");//sends it to the client
                s.close();//closing socket
                msg_area.setText(msg_area.getText().trim()+"\n Server:\tClient disconneted...!!!\t");
            }
    }
        //IOException handler for errors regarding Inuput,Output operations.
             catch (IOException e) {
                System.out.println(e);
            } 
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    // End of variables declaration//GEN-END:variables
}
